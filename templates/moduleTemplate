{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE DeriveDataTypeable  #-}
{-# LANGUAGE TemplateHaskell     #-}
module {{modName}} where

import qualified Data.ByteString as BS
import           Control.Applicative ((<$>), (<*>), empty)
import           Control.Lens
import           Data.Aeson
import           Data.Aeson.TH
import           Data.Data

{{#dataDecls}}
{{.}}
{{/dataDecls}}

{{#fromJSONs}}
{{.}}
{{/fromJSONs}}


{{#declNames}}
$(deriveToJSON tail ''{{.}})
$(makeLenses      ''{{.}})
{{/declNames}}
